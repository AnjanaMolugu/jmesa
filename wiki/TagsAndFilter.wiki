One of the first things you will notice when working with JMesa is that there are no JSP tags and no servlet filter. I'll start with the tags.

The reason there is no tag library right now is because I wanted to create an API that was developed without any influence of specific technologies that would make use of it. Or, in other words, I specifically wanted a Java API in which building tables with straight Java code was a first class citizen, and not a nice to have. As hard as I tried to refactor the eXtremeTable from a tag library to an API I could never get the tag notion out of it because the tag influence was too strong. 

For instance in the eXtremeTable any time you want something custom you have to link the fully qualified name of a class to an attribute, either right in the JSP tag, or through the  Preferences. In a way this seems fine for a tag, but when using the eXtremeTable API straight up you still had to give the fully qualified name, instead of simply calling a setter and injecting one class into another.

Another problem with tags is that when using a powerful tool like JMesa (or eXtremeTable) is that in many cases you want something custom. With a tag library it is not very obvious on how to customize an aspect of the table because a tag library by nature is supposed to simply work by changing tag attributes. When you are just using the API directly everything is exposed, especially with a nice IDE that does code completion and you can easily look at all the exposed methods of any given class.

That said, I do think at some time JMesa could have a tag library. The point of the tags would be to have a very clear tag syntax (name and attributes) that would look like you are building a JMesa table through code. However, tags only work well when you are merely changing attributes to change behavior so anything beyond a simple tag library I think is too much. Tags implemented like this would be very powerful and clean and would help to build tables in many many cases. More complex tables should be built through the API directly.

Exports, on the other hand, should always be done directly against the API.

The way exports work currently, in the eXtremeTable, is you define your table with a set of JSP tags, with one tag specifically for an export. Behind the scenes your table for the export is just like the table for html, with a different view (View interface). When you go to export what happens is the servlet filter is invoked and sends a dummy response through the rest of the request process. Part of the request process is to render the JSP with the tags, because, of course, you are hitting the same URL as normal. At that point the tag does everything it normally does but uses the export view. The export is then sent out in the request which is ultimately received by the servlet filter on the return response. This is all very common textbook servlet coding and is used by many web frameworks. However, there is a inherent flaw in this whole flow of invoking a JSP page to gather data, only to have a filter capture that data and set a response header to export data. There is so much opportunity for strange things to happen when invoking the JSP and trying to run through so many different frameworks.

With JMesa I did away with the whole filter notion. In addition I learned from the eXtremeTable and decided that just having a different view was not good enough. Instead you not only have a different view (View interface), but each view also gets their own [Components components], [Renderers renderers], and [Editors editors]. This allows for max flexibility at the expense of having to code up the export each time. However, for many exports using the [TableFactory]  can making creating an export a snap.








