===== jmesa-2_beta7 =====

The beta 7 release features a better filtering implementation. Along the way I also decided to re-write the spec to rename the !FilterMatch interface to [FilterMatcher], along with a similar naming convention for the other filtering classes in the core.filter package. The idea is to follow the spec, so doing this is not at all the norm. However, I am now very happy with the flexibility that we have with the filtering. In the next few weeks I will be working on more documentation to demonstrate how to plug in a custom filter, specifically looking at the !DateFilterMatcher class.

I also updated quite a bit of the documentation on the wiki and in the javadocs. Lastly, there are a few more unit tests to help solidify the filtering code.

==== jmesa-2_rc1 ====

The first release candidate introduces the [State] interface. This interface is used to set and retrieve the table Limit. Implementations will set the Limit so that it can be retrieved at a later time. This is useful so a user can return to a specific table with it filtered, sorted, and paged exactly like they left it.

{{{
State state = new PersistState(id, param, webContext);
}}}
The param variable is the parameter that the tells the !PersistState implementation to look for the Limit. 

{{{
public Limit getLimit(Collection items, State state, WebContext webContext) {
    Limit limit = state.retrieveLimit();
    if (limit != null) {
        return limit;
    }

    LimitFactory limitFactory = new LimitFactoryImpl(id, webContext);
    limit = limitFactory.createLimitAndRowSelect(maxRows, items.size());
    state.persistLimit(limit);
    return limit;
}
}}}

You can see an  
[http://extremecomponents.org/jmesa/advanced.run?state=true example]
on the JMesa site. 


The other major change is the row renderer and cell editor rowcount variable can be set to include the pagination in the Preferences. The default is to not include the pagination.
{{{
html.rowcount.includePagination=false
}}}






