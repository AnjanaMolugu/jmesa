The name Limit comes from the MySQL limit command, and the purpose of the
Limit interface is to know how to limit the table results. The implemenation
of the Limit knows how the user interacted with the table with regards to
sorting, filtering, paging, max rows to display, and exporting. With this
information you will be able to display the requested page filtered and
sorted correctly in the most efficient manner possible.

==== Example ====
Create a Limit using the !LimitFactory is as follows:

First you need to pass in the table id and the !WebContext. The table id is the unique identifier for the current table being built. The !WebContext is an adapter for the servlet request.

{{{
LimitFactory limitFactory = new LimitFactoryImpl(id, webContext);
Limit limit = limitFactory.createLimit();
}}}

Once you have the Limit you still need to create and set a !RowSelect object on the Limit. The !RowSelect needs to be added to the Limit so that the row information is available. The catch is the !RowSelect cannot be created until the total rows is known. If you are not manually filtering and sorting the table then it is easy because the totalRows is just the size of your items (Collection of Beans or Collection of Maps). However, if you are manually filtering and sorting the table to bring back one page of data then you first need to use the !FilterSet on the Limit to figure out the total rows.

Either way, once you have the total rows you can now create a !RowSelect with the factory. Lastly, set the !RowSelect on the Limit and your done!

{{{
RowSelect rowSelect = limitFactory.createRowSelect(maxRows, totalRows);
limit.setRowSelect(rowSelect);
}}}

==== Example (Convenience Method) ====
If you are not manually filtering and sorting there is a convenience method to create the Limit and !RowSelect at once. This even takes in consideration if the table is exporting and will create a !RowSelect object setting the maxRows and totalRows to the totalRows.

{{{
LimitFactory limitFactory = new LimitFactoryImpl(id, webContext);
Limit limit = limitFactory.createLimitAndRowSelect(maxRows, totalRows);
}}}

==== Export Consideration ====
If you are manually filtering and sorting and are doing an export then you should create the !RowSelect object yourself and set it on the Limit.

{{{
RowSelect rowSelect = new RowSelectImpl(1, totalRows, totalRows);
limit.setRowSelect(rowSelect);
}}}

==== The Limit Exposed ====
The real power of the Limit implementation becomes apparent when you want to put the table into a different state. Here we are adding a Sort object to sort the first name in ascending order. Then we are adding a Filter object to filter the last name. This will also force the table to go right to the second page.
{{{
limit.getSortSet().addSort("firstName", Order.ASC);
limit.getFilterSet().addFilter("lastName", "a");
limit.getRowSelect().setPage(2);
}}}

*Note:* If you want to persist a Limit you can use the [State] interface.

=== UML Class Diagrams ===

====The Limit class diagram.====

http://extremecomponents.googlepages.com/limit.png

====The LimitFactory class diagram.====

http://extremecomponents.googlepages.com/limitFactory.png































