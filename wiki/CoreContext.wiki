The !CoreContext interface represents the core package and is the real plumbing. With the !CoreContext you have direct access to the Items, Messages and Preferences. 

The Items are the Collection of Beans or Collection of Maps broken down after it is filtered, after it is sorted, and by the current page. The !CoreContext extends Items so you always have direct access to the data.

There is quite a bit more to creating the Items if you are using JMesa to do the filtering, sorting and paging. However this functionality is hidden by some very powerful interfaces with an implementation that is very easy to work with and easy to plug in your own strategies.

The [Messages] are the Locale specific text. The default implementation uses Java !ResourceBundles. The !CoreContext extends Messages so you always have direct access to the Locale specific text in your table.

The [Preferences] are used for a lot of the configuration instead of hardcoding the values. The default implementation uses Java Properties. If you need to override any of these default settings you can do so by creating your own jmesa.properties file and then change the values you want. The !CoreContext extends Preferences so you always have direct access to how things are configured.

==== Example ====
To build the !CoreContext with the factory you need the WebContext and the Limit, as well as the [Items items].

{{{
public CoreContext getCoreContext(Collection items, Limit limit, WebContext webContext) {
    CoreContextFactory factory = new CoreContextFactoryImpl(webContext);
    CoreContext coreContext = factory.createCoreContext(items, limit);
    return coreContext;
}
}}}

==== Example (disable filtering and sorting) ====
If you are manually filtering and sorting be sure to call the alternate constructor that skips the filtering and sorting step. And, just to be clear, you would call this because you have already filtered and sorted the items so there is no reason to do it again. This does not mean that the table does not show up in the filtered or sorted state. In this example pay attention to the *false* setting on the constructor.

{{{
public CoreContext getCoreContext(Collection items, Limit limit, WebContext webContext) {
    CoreContextFactory factory = new CoreContextFactoryImpl(false, webContext);
    CoreContext coreContext = factory.createCoreContext(items, limit);
    return coreContext;
}
}}}

==== Add Custom Filters ====
The !CoreContext will filter the items based on the property class type. If you need to add a custom filter or are trying to support a custom class type then you need to add your own [FilterMatcher filter matching strategy].


=== UML Class Diagrams ===

==== The CoreContext class diagram. ====

http://extremecomponents.googlepages.com/coreContext.png

==== The Sort class diagram. ====

http://extremecomponents.googlepages.com/sort.png

























