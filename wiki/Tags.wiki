#labels Featured
JMesa also has a complete tag library! The tags should be very intuitive and is a very similar facade to the [TableFacade].

An example and more documentation can be found here:
 * [TagsExample Tags Example]

One note I would like to make though is I learned from the eXtremeTable that using a filter to export the table is not a good idea. The support costs are just too high with trying to make it work for different environments. The problem was you had to parse through the JSP file for the sole purpose of generating the table in the correct markup. Doing that made outputting the data in the response very difficult and buggy. It is much easier and safer to handle the exports in the controller. However, if you use the new [TableFacade] it makes working with exports pretty trivial.

*Note: The tag library uses !SimpleTag, which requires JSP 2.0 or above.*

=== Example ===
The following will define the html table.

{{{
<jmesa:tableFacade
    id="pres" 
    items="${presidents}"
    maxRows="8"
    exportTypes="csv,excel"
    maxRowsIncrements="8,16,24"
    stateAttr="restore"
    var="bean"
    >
    <jmesa:htmlTable 
        captionKey="presidents.caption" 
        width="600px"
        >		
        <jmesa:htmlRow>	
            <jmesa:htmlColumn property="name.firstName" titleKey="presidents.firstName">
                <a href="http://www.whitehouse.gov/history/presidents/">${bean.name.firstName}</a>
            </jmesa:htmlColumn>
            <jmesa:htmlColumn property="name.lastName" title="Last Name"/>
            <jmesa:htmlColumn property="term"/>
            <jmesa:htmlColumn property="career"/>
            <jmesa:htmlColumn property="born" filterable="false" pattern="MM/yyyy" cellEditor="org.jmesa.view.editor.DateCellEditor"/>
        </jmesa:htmlRow>
    </jmesa:htmlTable> 
</jmesa:tableFacade>
}}}

To generate the exports use the [TableFacade] in your controller.

{{{
TableFacade tableFacade = new TableFacadeImpl(id, request, items, "name.firstName", "name.lastName", "term", "career");
tableFacade.setExportTypes(response, "csv", "excel");

Limit limit = tableFacade.getLimit();
if (limit.isExportable()) {
    tableFacade.render();
    return null;
}
}}}

=== Tags bean value ===
As of JMesa 2.2 I added the ability to get at the original bean from an editor when using the tags.

Technically, when using the tag library, under the hood the item is swapped out for a Map for each row. Because JMesa works with beans and maps completely transparently this works really well and is completely transparent. However, the map will only contain the values for the columns defined, and not the other values from the original bean. Now the original bean can be recovered from the map in the editor. The bean can be recovered from the map by the !TableFacadeTag var attribute.

For example if the tableFacade looks like this:
{{{
<jmesa:tableFacade
   id="tag" 
   ...
   var="bean"
>
}}}

Notice how the original item can be recovered by the var attribute! It is recommended that you use the !ItemUtils because that abstracts out whether or not the item is a bean or a map, which is perfect for this.

{{{
public class TagRowEvent implements RowEvent {
    public String execute(Object item, int rowcount) {
        Object bean = ItemUtils.getItemValue(item, "bean");
        Object id = ItemUtils.getItemValue(bean, "id");
        return "document.location='http://www.whitehouse.gov/history/presidents?id=" + id + "'";
    }
}
}}}

=== The following are the tags defined by JMesa. ===

==== !TableFacadeTag ====
|| *Attribute* || *Type* || *Description* ||
|| id || String || The unique table id. ||
|| [Items items] || Collection || The Collection of beans or maps. ||
|| limit || [Limit] || The Limit object to use. ||
|| maxRows || int || The max page rows. ||
|| maxRowsIncrements || String[] || The comma separated list of max rows increments. ||
|| stateAttr || String || The parameter to use for the [State]. ||
|| exportTypes || String[] || The comma separated list of exports. ||
|| performFilterAndSort || boolean || Whether the API should filter and sort the items. ||
|| filterMatcherMap || [FilterMatcher FilterMatcherMap] || Used to register custom filter matchers. ||
|| view || [View] || The View object to use. ||
|| var || String || The value to hold the current bean while iterating over the rows. ||

==== !HtmlTableTag ====
|| *Attribute* || *Type* || *Description* ||
|| caption || String || The caption for the table. ||
|| captionKey || String || The caption value to find in the messages. ||
|| theme || String || The css style sheet to use. ||
|| width || String || The width of the table. ||
|| style || String || The css style attribute for the table. ||
|| styleClass || String || The css class attribute for the table. ||
|| border || String || The table border attribute. ||
|| cellpadding || String || The table cellpadding attribute. ||
|| cellspacing || String || The table cellspacing attribute. ||

==== !HtmlRowTag ====
|| *Attribute* || *Type* || *Description* ||
|| highlighter || boolean || Whether to show the row highlighter effect. ||
|| onclick || [Components RowEvent] || The row onclick event. ||
|| onmouseout || [Components RowEvent] || The row onmouseout event. ||
|| onmouseover || [Components RowEvent] || The row onmouseover event. ||

==== !HtmlColumnTag ====
|| *Attribute* || *Type* || *Description* ||
|| property || String || The bean or map attribute from the [Items items]. ||
|| title || String || The column header title. ||
|| titleKey || String || The value to find in the messages. ||
|| cellEditor || [Editors] || The !CellEditor to use. ||
|| headerEditor || [Editors] || The !HeaderEditor to use. ||
|| filterEditor || [Editors] || The !FilterEditor to use. ||
|| pattern || String || The pattern to inject into the [Editors DateCellEditor or NumberCellEditor]. ||
|| filterable || boolean || Whether the column should be filtered. ||
|| sortable || boolean || Whether the column should be sorted. ||
|| width || String || The width of the column. ||
|| style || String || The css style attribute for the column. ||
|| styleClass || String || The css class attribute for the column. ||
















