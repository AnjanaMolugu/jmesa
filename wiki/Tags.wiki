_The following technique is available as of the JMesa 2.1 release._

JMesa now has a complete tag library! The tags should be very intuitive and is a very similar facade to the [TableFacade].

One note I would like to make though is I learned from the eXtremeTable that using a filter to export the table is not a good idea. The support costs are just too high with trying to make it work for different environments. The problem was you had to parse through the JSP file for the sole purpose of generating the table in the correct markup. Doing that made outputting the data in the response very difficult and buggy. It is much easier and safer to handle the exports in the controller. However, if you use the new [TableFacade] it makes working with exports pretty trivial.

*Note: The tag library uses !SimpleTag, which requires JSP 2.0 or above.*

=== Example ===
The following will define the html table.

{{{
<jmesa:table 
     id="presidents"
     items="${presidents}"
     var="pres"
     maxRows="12"
     caption="Presidents"
     exportTypes="csv,excel"
     width="600px"
     >
     <jmesa:row>		
         <jmesa:column property="name.firstName" title="First Name">
             <a href="http://www.whitehouse.gov/history/presidents/">${pres.name.firstName}</a>
         </jmesa:column>
         <jmesa:column property="name.lastName" title="Last Name"/>
         <jmesa:column property="term" title="Term"/>
         <jmesa:column property="career" title="Career"/>
     </jmesa:row>		
</jmesa:table> 
}}}

To generate the exports use the [TableFacade].

{{{
TableFacade facade = new TableFacadeImpl(id, request, items, "name.firstName", "name.lastName", "term", "career");
facade.setExportTypes(response, "csv", "excel");

Limit limit = facade.getLimit();
if (limit.isExportable()) {
    facade.render();
    return null;
}
}}}

=== The following are the tags defined by JMesa. ===

==== !TableTag ====
|| *Attribute* || *Type* || *Description* ||
|| id || String || The unique table id ||
|| [Items items] || Collection || The Collection of beans or maps ||
|| limit || [Limit] || The Limit object to use ||
|| maxRows || int || The max page rows ||
|| maxRowsIncrements || String || The toolbar max rows increments ||
|| stateAttr || String || The parameter to use for the [State] ||
|| var || String || The value to hold the current bean ||
|| caption || String || The caption for the table ||
|| captionKey || String || The value to find in the messages ||
|| theme || String ||  ||
|| exportTypes || String || The comma separated list of exports ||
|| width || String ||  ||
|| style || String ||  ||
|| styleClass || String ||  ||
|| border || String ||  ||
|| cellpadding || String ||  ||
|| cellspacing || String ||  ||

==== !RowTag ====
|| *Attribute* || *Type* || *Description* ||
|| highlighter || boolean ||  ||
|| onclick || String ||  ||
|| onmouseout || String ||  ||
|| onmouseover || String ||  ||

==== !ColumnTag ====
|| *Attribute* || *Type* || *Description* ||
|| property || String || The bean or map attribute ||
|| title || String || The column header title ||
|| titleKey || String || The value to find in the messages ||
|| cellEditor || String || The [Editors CellEditor] class ||
|| pattern || String || The pattern to inject into the CellEditor class ||
|| filterable || boolean ||  ||
|| sortable || boolean ||  ||
|| width || String ||  ||
|| style || String ||  ||
|| styleClass || String ||  ||
















