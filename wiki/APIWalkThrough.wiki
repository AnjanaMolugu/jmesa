The following is a walk-through of an example of creating a JMesa table. I also want to take the chance to explain some of the more advanced features and where they can be useful. At a later date I will be creating two other articles to explain the tag library and exports in more depth.

=== Setup ===
To start with grab the latest JMesa [http://code.google.com/p/jmesa/downloads/list download]. In there you will find the following: jmesa.jar, jmesa.css, jmesa-pdf.css, jmesa.js, default images, and the source code.

The first thing to do is take the jmesa.jar file and place it in your projects WEB-INF/lib directory. Next copy the jmesa.css and jmesa-pdf.css into a folder named css at the top of the web project. Then copy the jmesa.js into a folder named js at the top of the web project. You will also want to grab the latest version of [http://www.jquery.com jQuery] as JMesa requires that library now. Lastly, copy the default images into a folder named images/table at the top of the web project.

Of course all these files could be placed where ever you want. The places I have been recommending are pretty common, but you could use whatever you want. Here is a visual for you to look at.

 * web
  * css
   * jmesa.css
   * jmesa-pdf.css
  * js
   * jmesa.js
  * images
   * table
    * clear.gif
    * filter.gif
    * etc...
  * WEB-INF
   * lib
    * jmesa.jar

Moving these files around to other locations does not require any configuration on the part of JMesa, with the exception of the images. If you would like to use something other than the default images/table directory you need to set up your [Preferences] and override the html.imagesPath attribute.

{{{
html.imagesPath=/images/table/
}}}

=== Controller ===
You will always build JMesa tables in the controller when using the API directly. In the Spring framework the controller corresponds with the Controller interface, and in Struts it is called the Action. JMesa is very generic and will work in any type of servlet controller. In fact I like to think of a JMesa table as just another form element. The reason is because it is always placed inside an html form and renders as a component in the same manner as an input field, or dropdown list. It is easy to think it is something more than that, but if you keep in mind the simplicity of it it may help you conceptualize what is happening. In addition I recommend doing a view source on the rendered output to get comfortable with what JMesa is doing. 

{{{
TableFacade tableFacade = new TableFacadeImpl(id, request);
tableFacade.setColumnProperties("name.firstName", "name.lastName", "term", "career", "born");
}}}

