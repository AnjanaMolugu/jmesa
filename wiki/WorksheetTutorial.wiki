A JMesa Worksheet is just how it sounds...you are able to edit values in the table body and have those changes persisted. You are also able to have those changes be reflected as you sort, filter and page and then only be saved when the user is ready to save the changes. The really slick thing about this feature is how natural JMesa can handle it.

At a high level the way it works is changes to the table cell values get persisted in the Worksheet object as the user is making changes (via ajax call). These changes will persist even while filtering, sorting, and paging. Once the user is ready to save the changes they will have to click the (new) save toolbar button. Technically all this does is update a runtime flag ( isSaving() ) on the Worksheet so that you can tell they clicked the button. Then it is up to you to go through the Worksheet, retrieve the changes, and then persist them however you want. If there are errors then you can also add an error to a specific Worksheet column cell and have that redisplay in a way that demonstrates the save did not work for that column cell. If everything looks good then you remove that specific column cell change.

Do keep in mind though that at the point where you are saving the Worksheet the interaction is very manual. You have to retrieve the changes from the Worksheet, do what you need to save the changes, and then remove the column. This is all by design though! What the Worksheet does is keep track of all the changes made, so, just to be clear, the Worksheet only contains the changes.

In addition to being able to save a Worksheet you also have the ability to filter an editable table to only show the changes. To do this the user will have to click on the (new) filter worksheet toolbar button. _Note: if you are using the Limit object to only retrieve one page at a time you will need to code for this worksheet filtering._

Because the worksheet is just an extension to the core functionality this tutorial is a complement to the [BasicTutorial basic tutorial].

=== Setup ===

First you need to set up the servlet in the web.xml file. The servlet is used with AJAX technology to update the Worksheet as the user is interacting with the table. That way there are no page refreshes for the current page someone is editing.

{{{
<servlet>
    <servlet-name>worksheet</servlet-name>
    <servlet-class>org.jmesa.worksheet.servlet.WorksheetServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>worksheet</servlet-name>
    <url-pattern>*.wrk</url-pattern>
</servlet-mapping>
}}}

=== Editable Worksheet ===

Setting a table to be editable is very easy. To start with you have to set the !TableFacade to be editable. This tells JMesa to decorate the !CellEditor with the !WorksheetEditor. The only other thing you need to do is set the row unique property to be the property that can be used to identify the row. Typically this is also the unique identifier in the database.

==== API ====

Then set the table to be editable:

{{{
tableFacade.setEditable(true);

// the unique worksheet property to identify the row
row.setUniqueProperty("id"); 
}}}

To get a checkbox using the API:

{{{
HtmlColumn chkbox = row.getColumn("chkbox");
chkbox.getCellRenderer().setWorksheetEditor(new CheckboxWorksheetEditor());
chkbox.setTitle("&nbsp;");
chkbox.setFilterable(false);
chkbox.setSortable(false);
}}}

==== tags ====

{{{
<jmesa:tableFacade editable="true" >
   <jmesa:htmlRow uniqueProperty="id">

   </jmesa:htmlRow>
</jmesa:tableFacade>
}}}

To get a checkbox using the tags:

{{{
 <jmesa:htmlColumn property="chkbox" title="&nbsp;" worksheetEditor="org.jmesa.worksheet.editor.CheckboxWorksheetEditor" filterable="false" sortable="false"/>
}}}
