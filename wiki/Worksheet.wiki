With the features added to the (upcoming) JMesa [2_2NewAndNoteworthy 2.2 release] we now have everything needed to add support for an editable worksheet. The worksheet will be the main focus of the 2.3 release and should be available by mid November 2007. 

A JMesa worksheet is just how it sounds...you will be able to edit values in the table body and have those changes be reflected as you sort, filter and page. You will also be able to add and remove rows of the table. The really slick thing about this feature is how natural JMesa can handle it. I already started drawing up the class diagrams and am compiling a feature list. The following is a rough draft of what is needed to implement this feature.

Note: I will be using the JQuery !JavaScript library for all the Worksheet functionality. I think the JQuery library offers a lot of advanced functionality that will work perfectly with this feature. I think JQuery is an amazing project and there is no reason to create custom !JavaScript for things that a different library does better.

=== Worksheet Class ===

The main class is the Worksheet and represents what the user changed on the table. It will contain !WorksheetRows which contain !WorksheetColumns. A !WorksheetColumn represents the edited !HtmlColumn. As a developer you will use the Worksheet to know what was modified, added, and deleted. You will also have a way to add an error to individual columns.

To get this functionality you will have to tell the  [TableFacade] that it is editable.
{{{
tableFacade.setEditable(true);
}}}

You will also have to add an id to the !HtmlRow.
{{{
htmlRow.setId("id");
}}}

The id is the item property that is used to uniquely identify the row.

=== !WorksheetCellEditor Class ===
Is used to wrap (or decorate) the current !CellEditor to pull changed values from the Worksheet. The idea is that if a changed value is in the Worksheet then that will be displayed instead of the backing item value.

=== !DeleteWorksheetRowCellEditor Class ===
A !CellEditor that will flag this row as being deleted. The GUI effect is to put a strikeout character through all the columns in the row. The !WorksheetRow will be updated with a status of !WorksheetRowStatus.DELETED.

=== !UndoWorksheetRowCellEditor Class ===
A !CellEditor that will flag this row to undo the changes.

=== !WorksheetColumnEvent Class ===
As of JMesa 2.2 there is !RowEvent support. The same functionality will be added for the columns in the form of a !ColumnEvent interface. The !WorksheetColumnEvent would trigger a div pop-up through an onclick event on the column cell. The div pop-up will contain an input field to edit the column value. The div pop-up will operate very much like the filter div, but styled different.

Once the value is changed it will trigger an onchange event. The onchange event will add the changes to the Worksheet object, however, whether that hits the server directly or stays client side is another decision to make.

A column parameter looks like this:
{{{
id_row_"rowid"_"property"= value
}}}

An example is:
{{{
pres_row_id-5_born=1758
}}}

The way this reads is the pres table with a row containing a primary property of id and value of 5. The column being edited is the born column. The value is changed to 1758.

====The Worksheet class diagram.====

http://extremecomponents.googlepages.com/worksheet.png




