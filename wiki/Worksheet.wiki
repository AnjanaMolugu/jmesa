With the features added to the JMesa [2_2NewAndNoteworthy 2.2 release] we now have everything needed to add support for an editable Worksheet. The worksheet will be the main focus of the 2.3 release and should be available by mid November 2007. 

A JMesa Worksheet is just how it sounds...you will be able to edit values in the table body and have those changes be reflected as you sort, filter and page. You will also be able to add and remove rows of the table. The really slick thing about this feature is how natural JMesa can handle it. I already started drawing up the class diagrams and am compiling a feature list. The following is a rough draft of what is needed to implement this feature.

I will be using the [http://jquery.com/ JQuery] !JavaScript library for all the Worksheet functionality. I think the JQuery library offers a lot of advanced functionality that will work perfectly with this feature. I think [http://jquery.com/ JQuery] is an amazing project and there is no reason to create custom !JavaScript for things that a different library does better.

=== Worksheet Class ===

The main class is the Worksheet and represents what the user changed on the table. It will contain !WorksheetRows which contain !WorksheetColumns. A !WorksheetColumn represents the edited !HtmlColumn. As a developer you will use the Worksheet to know what was modified, added, and deleted. You will also have a way to add an error to individual columns.

To get this functionality you will have to tell the  [TableFacade] that it is editable.
{{{
tableFacade.setEditable(true);
}}}

You will also have to add the unique item properties to the !HtmlRow.
{{{
htmlRow.setUniqueProperties("id");
}}}

In this example "id" is the item property that is used to uniquely identify the row. This can be a comma separated array of properties. On the Worksheet the uniqueProperties is a map in which the map keys are the item properties and the value is the item value.

=== !WorksheetRow Class ===
The !WorksheetRows which contain !WorksheetColumns. A row can have many statuses. It can be a newly added row, a modified row, or a deleted row. 

If a row is modified and then later deleted (before being saved) then it will be deleted from the Worksheet. There is no reason for anyone to be aware that a row was almost created. That should make sense. On the other hand if you delete a row that existed previously (ie, the row exists in the database) then you have to flag the row as being deleted so that you would know to delete the row in the database.

=== !WorksheetColumn Class ===
A !WorksheetColumn represents the edited !HtmlColumn. The originalValue is the value that was originally pulled from the bean (ie, pulled from database). This allows a table to revert back to the original value if needed. The changedValue is the value that was modified by the user. 

You are also able to register an error with the column. I debated being able to put more than one error, but the GUI would have a hard time dealing with multiple errors anyway so I kept this down to one error.

=== !WorksheetCellEditor Class ===
Is used to wrap (or decorate) the current !CellEditor to pull changed values from the Worksheet. The idea is that if a changed value is in the Worksheet then that will be displayed instead of the backing item value.

=== !DeleteWorksheetRowCellEditor Class ===
A !CellEditor that will flag this row as being deleted. The GUI effect is to put a strikeout character through all the columns in the row. The !WorksheetRow will be updated with a status of !WorksheetRowStatus.DELETED.

=== !AddWorksheetRowCellEditor Class ===
A !CellEditor that will flag this row as being added. The GUI effect is to bring up a div with all the columns in a form. The !WorksheetRow will be updated with a status of !WorksheetRowStatus.NEW.

=== !WorksheetColumnEvent Class ===
As of JMesa 2.2 there is !RowEvent support. The same functionality will be added for the columns in the form of a !ColumnEvent interface. The !WorksheetColumnEvent would trigger a div pop-up through an onclick event on the column cell. The div pop-up will contain an input field to edit the column value. The div pop-up will operate very much like the filter div, but styled different.

Once the value is changed it will trigger an onchange event. The onchange event will add the changes to the Worksheet object via the !WorksheetServlet.

A column parameter looks like this:
{{{
id_row_"uniqueProperties"_"property"= value
}}}

An example is:
{{{
pres_row_id-5_born=1758
}}}

The way this reads is the pres table with a row containing a primary property of id and value of 5. The column being edited is the born column. The value is changed to 1758.

=== !WorksheetServlet Class ===
Will store the Worksheet object in the users session by the table  id. However, once the servlet is set up the developer will not ever have to deal with the fact that the Worksheet object is in session. The ajax calls will abstract that out from the html table side. Then the !TableFacade will abstract out the retrieve of the Worksheet in the controller. 

Note: Keep in mind that using the servlet is just one implementation. You could just call a controller and then have the !TableFacade get the Worksheet with just the most recent change. However, the servlet allows for a very transparent way to edit tables over a longer session as a user filter, sorts, and paginates. The !TableFacade will first look for changes passed to the controller and then for changes in the session to make things very flexible.

=== !SpringWorksheetServlet Class ===
For Spring users there is a very slick way to get changes to the table. The idea is you have a bean that implements a listener. That listener will listen for the user to either change something on the table, or ask for the table to be saved. The dispatcher will link the different listeners to the servlet. That means you only have to add the dispatcher to the servlet, and then the dispatcher makes sure that the right listener gets invoked.

=== !WorksheetState Class ===
Abstracts out where the Worksheet is being held so that the servlet and facade can work with the Worksheet transparently.

=== Other Notes ===
There will be a custom toolbar that will appear for the Worksheet. It is not completely defined yet but the idea would be to add features such as the ability to save a Worksheet and filter to see only the changed values.

=== UML Class Diagrams ===

====The Worksheet class diagram.====

http://extremecomponents.googlepages.com/worksheet.png

