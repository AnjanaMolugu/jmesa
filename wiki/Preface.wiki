The eXtremeTable project is being replaced by a new project I created called JMesa. The reason is the eXtremeTable was created to be a tag library, and thus carries with it a lot of design flaws. The project is solid, and the features are good, but after seeing what worked and what did not work in the eXtremeTable I knew I either needed to build a better table, or just leave the eXtremeTable to be what it was.

So, enter JMesa... I spent about 2 months working on the UML to build a table that was soley written from an API standpoint, with a clear separation of concerns. The highlights of the new architecture can be broken down into three key packages. The first package is the limit, which produces a Limit object that is now standalone and can be persisted as it is serializable. The Limit can also be manipulated directly by adding Filter and Sort objects, or setting a specific page. The effect is the table renders as filtered, sorted and paged. The second main package is the core, which will use the Limit to do the actual filtering and sorting. The core package also represents the Preferences and Messages. By invoking the CoreContextFactory you get all this functionality bundled into a nice CoreContext object. The third main package is the view, which only renders the data and is built with components that are for building views. The view uses both the Limit and CoreContext to build the views, however neither show up on the UML to provide max flexiblity to build the views. In comparison, the eXtremeTable kind of mashes all this together and tries to glue it together with the Model.

I could really go on and on, but the overall point is that the API is written from scratch from what was learned from the eXtremeTable. Of course I ripped off a lot of code from that project, but you would never know it as the interfaces are so different. Even at the javascript level I now have a Limit domain made from Javascript objects that get manipulated versus hidden form fields. Think of the AJAX possibilities! JMesa is now also more of a form component like a select list or input field in that you place it in a form (optionally), or however you want as the markup is solely the table. Lastly, what is very interesting, is now you will find that the exports are just a different table, with their own components, renderers, and editors.

If there is a catch it would be that JMesa is written with the JDK1.5. I know that will not work for many people, but the industry is moving to the JDK1.5 (or even JDK1.6 as there are no language changes) and it is so much nicer working with the new JDK features. On the flip side I am going to treat the UML like a spec in that unless there is an obvious flaw in the release candidates then this is it. This is important because I put people through the wringer with all the refactorings getting the eXtremeTable to a 1.0 release and trying to make things flexible. So, if at some point we really wanted we could have a JDK1.4 version that follows the spec, however, I would be inclined to leave that up to the community to develop.

Lastly, the code is just flat out clean, clear and consistent. Working with JMesa will make building tables more powerful and fun! 

